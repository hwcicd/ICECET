[
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Test, Build, Deploy",
    "section": "",
    "text": "None of us is as smart as all of us.\n\n\nAmber Huffman, Principal Engineer, Google Cloud\n\n\n\n\n\n\n\n\n\n\nWith the collapse of MOSFET scaling circa 2006, higher hardware performance became tightly coupled with higher hardware complexity due to due heat and power constraints.\n\nAlso called “The Heat Wall”\n\nAn explosion of hardware complexity drove major advances in Hardware Design Languages (HDLs).\n\nIn 2009 when IEEE 1364 Verilog standard expanded to inlcude SystemVerilog for software-driven simulation and testing.\n\nThe 2009 “DevOps” formulation of Continious Integration/Continous Deployment can be applied to specifications of hardware in HDLs.\n\n\n\n\n\nMajor advances in open source hardware.\n\nRISC-V open source CPUs\nOpenTitan/Caliptra open source root of trust (RoT)\n\nMajor advances in CI/CD formulations for open source hardware\n\nGitHub Actions for CI/CD\nHardware Specification mining for HDLs\n\nWe provide:\n\nA framework to build specifications from HDLs\nA container package to automate the process within workflows."
  },
  {
    "objectID": "slides.html#problem-statement",
    "href": "slides.html#problem-statement",
    "title": "Test, Build, Deploy",
    "section": "",
    "text": "With the collapse of MOSFET scaling circa 2006, higher hardware performance became tightly coupled with higher hardware complexity due to due heat and power constraints.\n\nAlso called “The Heat Wall”\n\nAn explosion of hardware complexity drove major advances in Hardware Design Languages (HDLs).\n\nIn 2009 when IEEE 1364 Verilog standard expanded to inlcude SystemVerilog for software-driven simulation and testing.\n\nThe 2009 “DevOps” formulation of Continious Integration/Continous Deployment can be applied to specifications of hardware in HDLs."
  },
  {
    "objectID": "slides.html#state-of-play",
    "href": "slides.html#state-of-play",
    "title": "Test, Build, Deploy",
    "section": "",
    "text": "Major advances in open source hardware.\n\nRISC-V open source CPUs\nOpenTitan/Caliptra open source root of trust (RoT)\n\nMajor advances in CI/CD formulations for open source hardware\n\nGitHub Actions for CI/CD\nHardware Specification mining for HDLs\n\nWe provide:\n\nA framework to build specifications from HDLs\nA container package to automate the process within workflows."
  },
  {
    "objectID": "slides.html#requirements",
    "href": "slides.html#requirements",
    "title": "Test, Build, Deploy",
    "section": "Requirements",
    "text": "Requirements\n\nTestbench\n\nAn HDL “script” to be executed in simulation by a hardware design\n\n\nA way of testing hardware pre-silicon\n\nSimulator\n\nA piece of software that compiles HDL and testbench into a machine executable format\n\nTrace\n\nA transcription of the value of every hardware register at every timepoint while executing some instructions\n\n\nOften stored as a “value change dump” only recording changes for brevity\n\nTranslator\n\nA custom script to convert a hardware trace into a simulated software trace, for software quality tools\n\nMiner\n\nA software quality tool that automatical generates specifications from traces"
  },
  {
    "objectID": "slides.html#specification",
    "href": "slides.html#specification",
    "title": "Test, Build, Deploy",
    "section": "Specification",
    "text": "Specification\n\nSpecify hardware design as rules over registers\n\n\n\n// Extended Backus–Naur\nrule = test | isin | mult | line\n\ntest = reg, eqs, reg\n     | reg, eqs, nat\n\nisin = reg, \"∈ {\", nat, \",\", nat, \"}\"\n     | reg, \"∈ {\", nat, \",\", nat, \",\", nat \"}\"\n\nmult = reg, \"≡\", reg, \"(mod 0)\"\n\nline = reg, \"+\", reg, \"×\", reg, \n            \"-\", reg, \"+\", nat, \"= 0\"\n\nreg : string\nnat : natural\neqs = \"=\" | \"≠\" | \"&lt;\" | \"⋜\" | \"&gt;\" | \"⋝\"\n\n// Examples\nwr = -1\nwr &lt; trap\nwr ⋜ imem\ntrap ⋝ imem\ntrap ≠ csr\nout ∈ { -1, 0 }\nstatus ∈ { -1, 0, 6144 }\nclk % imem = 0\nclk + 4 * csr - 2 * pc + 3 = 0\n\n-1 denotes a non-numeric hardware value (for uninitalized registers)"
  },
  {
    "objectID": "slides.html#graph-representation",
    "href": "slides.html#graph-representation",
    "title": "Test, Build, Deploy",
    "section": "Graph Representation",
    "text": "Graph Representation"
  },
  {
    "objectID": "slides.html#myrtha",
    "href": "slides.html#myrtha",
    "title": "Test, Build, Deploy",
    "section": "Myrtha",
    "text": "Myrtha"
  },
  {
    "objectID": "slides.html#iverilog",
    "href": "slides.html#iverilog",
    "title": "Test, Build, Deploy",
    "section": "iverilog",
    "text": "iverilog"
  },
  {
    "objectID": "slides.html#script",
    "href": "slides.html#script",
    "title": "Test, Build, Deploy",
    "section": "Script",
    "text": "Script\n\nCite vcd2df?"
  },
  {
    "objectID": "slides.html#daikon",
    "href": "slides.html#daikon",
    "title": "Test, Build, Deploy",
    "section": "Daikon",
    "text": "Daikon"
  },
  {
    "objectID": "slides.html#picorv32",
    "href": "slides.html#picorv32",
    "title": "Test, Build, Deploy",
    "section": "PicoRV32",
    "text": "PicoRV32"
  },
  {
    "objectID": "slides.html#holdouts",
    "href": "slides.html#holdouts",
    "title": "Test, Build, Deploy",
    "section": "Holdouts",
    "text": "Holdouts"
  },
  {
    "objectID": "slides.html#performance",
    "href": "slides.html#performance",
    "title": "Test, Build, Deploy",
    "section": "Performance",
    "text": "Performance"
  },
  {
    "objectID": "slides.rjs.html#problem-statement",
    "href": "slides.rjs.html#problem-statement",
    "title": "Test, Build, Deploy",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nWith the collapse of MOSFET scaling circa 2006, higher hardware performance became tightly coupled with higher hardware complexity due to due heat and power constraints.\n\nAlso called “The Heat Wall”\n\nAn explosion of hardware complexity drove major advances in Hardware Design Languages (HDLs).\n\nIn 2009 when IEEE 1364 Verilog standard expanded to inlcude SystemVerilog for software-driven simulation and testing.\n\nThe 2009 “DevOps” formulation of Continious Integration/Continous Deployment can be applied to specifications of hardware in HDLs."
  },
  {
    "objectID": "slides.rjs.html#state-of-play",
    "href": "slides.rjs.html#state-of-play",
    "title": "Test, Build, Deploy",
    "section": "State of Play",
    "text": "State of Play\n\nMajor advances in open source hardware.\n\nRISC-V open source CPUs\nOpenTitan/Caliptra open source root of trust (RoT)\n\nMajor advances in CI/CD formulations for open source hardware\n\nGitHub Actions for CI/CD\nHardware Specification mining for HDLs\n\nWe provide:\n\nA framework to build specifications from HDLs\nA container package to automate the process within workflows."
  },
  {
    "objectID": "slides.rjs.html#requirements",
    "href": "slides.rjs.html#requirements",
    "title": "Test, Build, Deploy",
    "section": "Requirements",
    "text": "Requirements\n\nTestbench\n\nAn HDL “script” to be executed in simulation by a hardware design\n\n\nA way of testing hardware pre-silicon\n\nSimulator\n\nA piece of software that compiles HDL and testbench into a machine executable format\n\nTrace\n\nA transcription of the value of every hardware register at every timepoint while executing some instructions\n\n\nOften stored as a “value change dump” only recording changes for brevity\n\nTranslator\n\nA custom script to convert a hardware trace into a simulated software trace, for software quality tools\n\nMiner\n\nA software quality tool that automatical generates specifications from traces"
  },
  {
    "objectID": "slides.rjs.html#specification",
    "href": "slides.rjs.html#specification",
    "title": "Test, Build, Deploy",
    "section": "Specification",
    "text": "Specification\n\nSpecify hardware design as rules over registers\n\n\n\n// Extended Backus–Naur\nrule = test | isin | mult | line\n\ntest = reg, eqs, reg\n     | reg, eqs, nat\n\nisin = reg, \"∈ {\", nat, \",\", nat, \"}\"\n     | reg, \"∈ {\", nat, \",\", nat, \",\", nat \"}\"\n\nmult = reg, \"≡\", reg, \"(mod 0)\"\n\nline = reg, \"+\", reg, \"×\", reg, \n            \"-\", reg, \"+\", nat, \"= 0\"\n\nreg : string\nnat : natural\neqs = \"=\" | \"≠\" | \"&lt;\" | \"⋜\" | \"&gt;\" | \"⋝\"\n\n// Examples\nwr = -1\nwr &lt; trap\nwr ⋜ imem\ntrap ⋝ imem\ntrap ≠ csr\nout ∈ { -1, 0 }\nstatus ∈ { -1, 0, 6144 }\nclk % imem = 0\nclk + 4 * csr - 2 * pc + 3 = 0\n\n-1 denotes a non-numeric hardware value (for uninitalized registers)"
  },
  {
    "objectID": "slides.rjs.html#graph-representation",
    "href": "slides.rjs.html#graph-representation",
    "title": "Test, Build, Deploy",
    "section": "Graph Representation",
    "text": "Graph Representation"
  },
  {
    "objectID": "slides.rjs.html#myrtha",
    "href": "slides.rjs.html#myrtha",
    "title": "Test, Build, Deploy",
    "section": "Myrtha",
    "text": "Myrtha"
  },
  {
    "objectID": "slides.rjs.html#iverilog",
    "href": "slides.rjs.html#iverilog",
    "title": "Test, Build, Deploy",
    "section": "iverilog",
    "text": "iverilog"
  },
  {
    "objectID": "slides.rjs.html#script",
    "href": "slides.rjs.html#script",
    "title": "Test, Build, Deploy",
    "section": "Script",
    "text": "Script\n\nCite vcd2df?"
  },
  {
    "objectID": "slides.rjs.html#daikon",
    "href": "slides.rjs.html#daikon",
    "title": "Test, Build, Deploy",
    "section": "Daikon",
    "text": "Daikon"
  },
  {
    "objectID": "slides.rjs.html#picorv32",
    "href": "slides.rjs.html#picorv32",
    "title": "Test, Build, Deploy",
    "section": "PicoRV32",
    "text": "PicoRV32"
  },
  {
    "objectID": "slides.rjs.html#holdouts",
    "href": "slides.rjs.html#holdouts",
    "title": "Test, Build, Deploy",
    "section": "Holdouts",
    "text": "Holdouts"
  },
  {
    "objectID": "slides.rjs.html#performance",
    "href": "slides.rjs.html#performance",
    "title": "Test, Build, Deploy",
    "section": "Performance",
    "text": "Performance"
  }
]